using Content.Shared.CartridgeLoader.Cartridges;
using Content.Shared.CartridgeLoader.Cartridges.Messenger;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Serilog;

namespace Content.Client.CartridgeLoader.Cartridges.Messenger;

[GenerateTypedNameReferences]
public sealed partial class MessengerUiFragment : BoxContainer
{
    // where EntityUid is to receiver and string is message
    public event Action<EntityUid, string>? OnMessageSendButtonPressed;

    // where EntityUid is from sender
    public event Action<EntityUid>? OnHistoryViewPressed;

    public event Action<bool>? OnBackButtonPressed;

    public EntityUid CurrentChat;

    private readonly StyleBoxFlat _styleBox = new()
    {
        BackgroundColor = Color.Transparent,
        BorderColor = Color.FromHex("#5a5a5a"),
        BorderThickness = new Thickness(0, 0, 0, 1)
    };

    public MessengerUiFragment()
    {
        RobustXamlLoader.Load(this);

        Orientation = LayoutOrientation.Vertical;
        HorizontalExpand = true;
        VerticalExpand = true;

        SendButton.OnPressed += _ =>
        {
            OnMessageSendButtonPressed?.Invoke(CurrentChat, MessageInput.Text);
            MessageInput.Clear();
        };

        BackButton.OnPressed += _ =>
        {
            OnBackButtonPressed?.Invoke(true);
        };

        // // todo delete
        // BackButton.Visible = true;
        // MessageInput.Visible = true;
        // SendButton.Visible = true;
        // // todo delete
    }

    public void UpdateChatsState(Dictionary<EntityUid, MessengerMessage?> lastMessages)
    {
        ChatsContainer.RemoveAllChildren();

        foreach (var (from, msg) in lastMessages)
        {
            var chatItem = new MessengerUiChatItem();

            chatItem.ChatName.Text = msg?.Name;
            if (!string.IsNullOrEmpty(msg?.Text))
                chatItem.LastMessage.Text = $"{msg.SentTime:hh\\:mm\\:ss}: {msg.Text}";
            chatItem.OpenChatHistoryButton.OnPressed += _ =>
            {
                OnHistoryViewPressed?.Invoke(from);
            };

            ChatsContainer.AddChild(chatItem);
        }

        BackButton.Visible = false;
        MessageInput.Visible = false;
        SendButton.Visible = false;
    }

    public void UpdateChatHistoryState(EntityUid receiver, List<MessengerHistoryMessage> history)
    {
        ChatsContainer.RemoveAllChildren();

        CurrentChat = receiver;

        foreach (var msg in history)
        {
            var message = new Label();
            if (!msg.IsIncoming)
            {
                message.Text = $"you: {msg.Text}";
                message.Align = Label.AlignMode.Right;
            }
            else
            {
                message.Text = $"{msg.ToName}: {msg.Text}";
                message.Align = Label.AlignMode.Left;
            }
            ChatsContainer.AddChild(message);
        }

        BackButton.Visible = true;
        MessageInput.Visible = true;
        SendButton.Visible = true;
    }
}
